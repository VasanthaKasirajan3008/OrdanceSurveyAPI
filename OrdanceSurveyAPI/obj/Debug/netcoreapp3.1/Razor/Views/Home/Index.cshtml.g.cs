#pragma checksum "C:\Users\vasan\source\repos\OrdanceSurveyAPI\OrdanceSurveyAPI\Views\Home\Index.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "020f6722f037b8c71c8b0c08ac6a81d272570a50"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Home_Index), @"mvc.1.0.view", @"/Views/Home/Index.cshtml")]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#nullable restore
#line 1 "C:\Users\vasan\source\repos\OrdanceSurveyAPI\OrdanceSurveyAPI\Views\_ViewImports.cshtml"
using OrdanceSurveyAPI;

#line default
#line hidden
#nullable disable
#nullable restore
#line 2 "C:\Users\vasan\source\repos\OrdanceSurveyAPI\OrdanceSurveyAPI\Views\_ViewImports.cshtml"
using OrdanceSurveyAPI.Models;

#line default
#line hidden
#nullable disable
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"020f6722f037b8c71c8b0c08ac6a81d272570a50", @"/Views/Home/Index.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"d8b629007ce0ea1cdaba9de683165eef7e3870de", @"/Views/_ViewImports.cshtml")]
    public class Views_Home_Index : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "dpa", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("value", "lpi", global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper;
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper;
        private global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#nullable restore
#line 1 "C:\Users\vasan\source\repos\OrdanceSurveyAPI\OrdanceSurveyAPI\Views\Home\Index.cshtml"
  
    ViewData["Title"] = "Home Page";

#line default
#line hidden
#nullable disable
            WriteLiteral("\r\n<div class=\"text-center\">\r\n    <h1 class=\"display-4\">Welcome</h1>\r\n    <p>Learn about <a href=\"https://docs.microsoft.com/aspnet/core\">building Web apps with ASP.NET Core</a>.</p>\r\n</div>\r\n\r\n\r\n");
            WriteLiteral("\r\n<!DOCTYPE html>\r\n<html lang=\"en\">\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("head", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "020f6722f037b8c71c8b0c08ac6a81d272570a504740", async() => {
                WriteLiteral(@"
    <meta charset=""utf-8"" />
    <meta name=""viewport"" content=""width=device-width, initial-scale=1.0"" />
    <title>OS Places API | Form Filling (Capture and Verification) Example</title>
    <style>
        body { font: 14px/20px 'Helvetica Neue', Arial, Helvetica, sans-serif; }
        form fieldset {
            border: 1px solid black;
            margin: 0 0 4px;
        }
        form input {
            width: 320px;
            margin-bottom: 4px;
            display: block;
        }
        table { table-layout: fixed; }
        table, th, td {
            border: 1px solid black;
            border-collapse: collapse;
            padding: 0 2px;
        }
        td:last-child { width: 100%; }
        #dataset { margin: 0 8px; }
        #results {
            width: 100%;
            height: 80px;
            margin: 2px 0;
        }
        .hidden {
            position: absolute !important;
            left: -9999px;
            top: -9999px;
        }
        ");
                WriteLiteral(@".loader {
            border: 2px solid lightgrey;
            border-top: 2px solid black;
            border-radius: 50%;
            width: 12px;
            height: 12px;
            margin: 0 8px;
            display: none;
            vertical-align: text-top;
            animation: spin 2s linear infinite;
        }
");
                WriteLiteral("        /* ::placeholder { color:lightgrey; opacity:1; }\r\n        :-ms-input-placeholder { color:lightgrey; }\r\n        ::-ms-input-placeholder { color:lightgrey; } */\r\n    </style>\r\n");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.HeadTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_HeadTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n");
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("body", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "020f6722f037b8c71c8b0c08ac6a81d272570a507330", async() => {
                WriteLiteral(@"

    <input id=""apikey"" type=""text"" placeholder=""<API KEY>"">
    <input id=""query"" type=""search"" placeholder=""Search..."">

    <input id=""find"" type=""radio"" name=""resource"" value=""find"" checked=""checked"">
    <label for=""find"">Find</label>
    <input id=""postcode"" type=""radio"" name=""resource"" value=""postcode"">
    <label for=""postcode"">Postcode</label>
    <input id=""uprn"" type=""radio"" name=""resource"" value=""uprn"">
    <label for=""uprn"">UPRN</label>

    <select id=""dataset"" name=""dataset"">
        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "020f6722f037b8c71c8b0c08ac6a81d272570a508151", async() => {
                    WriteLiteral("DPA");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_0.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_0);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n        ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("option", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "020f6722f037b8c71c8b0c08ac6a81d272570a509379", async() => {
                    WriteLiteral("LPI");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.OptionTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_OptionTagHelper.Value = (string)__tagHelperAttribute_1.Value;
                __tagHelperExecutionContext.AddTagHelperAttribute(__tagHelperAttribute_1);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral("\r\n    </select>\r\n\r\n    <button id=\"submit\">Submit</button>\r\n\r\n    <div class=\"loader\"></div>\r\n\r\n    <select id=\"results\" name=\"results\" multiple></select>\r\n\r\n    ");
                __tagHelperExecutionContext = __tagHelperScopeManager.Begin("form", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "020f6722f037b8c71c8b0c08ac6a81d272570a5010783", async() => {
                    WriteLiteral(@"
        <fieldset>
            <legend>Address</legend>
            <input id=""_addr1"" type=""text"" placeholder=""Address Line 1"">
            <input id=""_addr2"" type=""text"" placeholder=""Address Line 2"">
            <input id=""_addr3"" type=""text"" placeholder=""Address Line 3"">
            <input id=""_addr4"" type=""text"" placeholder=""Address Line 4"">
            <input id=""_locality"" type=""hidden"" placeholder=""Locality"">
            <input id=""_town"" type=""text"" placeholder=""Town"">
            <input id=""_admin"" type=""hidden"" placeholder=""Administrative Area"">
            <input id=""_postcode"" type=""text"" placeholder=""Postcode"">
            <button id=""copy"">Copy</button>
        </fieldset>
    ");
                }
                );
                __Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.FormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_FormTagHelper);
                __Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.TagHelpers.RenderAtEndOfFormTagHelper>();
                __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_TagHelpers_RenderAtEndOfFormTagHelper);
                await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
                if (!__tagHelperExecutionContext.Output.IsContentModified)
                {
                    await __tagHelperExecutionContext.SetOutputContentAsync();
                }
                Write(__tagHelperExecutionContext.Output);
                __tagHelperExecutionContext = __tagHelperScopeManager.End();
                WriteLiteral(@"

<textarea class=""hidden"" type=""text""></textarea>

    <table></table>

    <div><strong>Query URI: </strong><span id=""uri""></span></div>

    <script>

        alert('hi')

        // Define an empty JSON object to temporarily store the matched results.
        var oJson = {};

        // Define DPA and LPI field names (used to populate table structure).
        var fields = {
            'DPA': [
                'UPRN',
                'UDPRN',
                'ADDRESS',
                'DEPARTMENT_NAME',
                'ORGANISATION_NAME',
                'SUB_BUILDING_NAME',
                'BUILDING_NAME',
                'BUILDING_NUMBER',
                'PO_BOX_NUMBER',
                'DEPENDENT_THOROUGHFARE_NAME',
                'THOROUGHFARE_NAME',
                'DOUBLE_DEPENDENT_LOCALITY',
                'DEPENDENT_LOCALITY',
                'POST_TOWN',
                'POSTCODE',
                'RPC',
                'X_COORDINATE',
                'Y_CO");
                WriteLiteral(@"ORDINATE',
                'LNG',
                'LAT',
                'STATUS',
                'LOGICAL_STATUS_CODE',
                'CLASSIFICATION_CODE',
                'CLASSIFICATION_CODE_DESCRIPTION',
                'LOCAL_CUSTODIAN_CODE',
                'LOCAL_CUSTODIAN_CODE_DESCRIPTION',
                'POSTAL_ADDRESS_CODE',
                'POSTAL_ADDRESS_CODE_DESCRIPTION',
                'BLPU_STATE_CODE',
                'BLPU_STATE_CODE_DESCRIPTION',
                'TOPOGRAPHY_LAYER_TOID',
                'LAST_UPDATE_DATE',
                'ENTRY_DATE',
                'BLPU_STATE_DATE',
                'LANGUAGE',
                'MATCH',
                'MATCH_DESCRIPTION'
            ],
            'LPI': [
                'UPRN',
                'ADDRESS',
                'USRN',
                'LPI_KEY',
                'ORGANISATION',
                'SAO_TEXT',
                'SAO_START_NUMBER',
                'SAO_START_SUFFIX',
                '");
                WriteLiteral(@"SAO_END_NUMBER',
                'SAO_END_SUFFIX',
                'PAO_TEXT',
                'PAO_START_NUMBER',
                'PAO_START_SUFFIX',
                'PAO_END_NUMBER',
                'PAO_END_SUFFIX',
                'STREET_DESCRIPTION',
                'LOCALITY',
                'TOWN_NAME',
                'ADMINISTRATIVE_AREA',
                'POSTCODE_LOCATOR',
                'RPC',
                'X_COORDINATE',
                'Y_COORDINATE',
                'LNG',
                'LAT',
                'STATUS',
                'LOGICAL_STATUS_CODE',
                'CLASSIFICATION_CODE',
                'CLASSIFICATION_CODE_DESCRIPTION',
                'LOCAL_CUSTODIAN_CODE',
                'LOCAL_CUSTODIAN_CODE_DESCRIPTION',
                'POSTAL_ADDRESS_CODE',
                'POSTAL_ADDRESS_CODE_DESCRIPTION',
                'BLPU_STATE_CODE_DESCRIPTION',
                'TOPOGRAPHY_LAYER_TOID',
                'LAST_UPDATE_DATE',
             ");
                WriteLiteral(@"   'ENTRY_DATE',
                'STREET_STATE_CODE',
                'STREET_STATE_CODE_DESCRIPTION',
                'LPI_LOGICAL_STATUS_CODE',
                'LPI_LOGICAL_STATUS_CODE_DESCRIPTION',
                'LANGUAGE',
                'MATCH',
                'MATCH_DESCRIPTION',
            ]
        };

        initialiseTable(fields.DPA);

        // Add an event listener to handle when the user clicks the 'Submit' button.
        var btnSubmit = document.getElementById('submit');
        btnSubmit.addEventListener('click', getFeatures);

        // Add an event listener to handle when the user clicks the 'Copy' button.
        //var btnCopy= document.getElementById('copy');
        //btnCopy.addEventListener('click', copyToClipboard);

        // Define a [global scope] variable for the <textarea>.
        var textarea = document.getElementsByTagName('textarea')[0];

        // Define a [global scope] variable for the loader.
        var loader = document.getElementsByCl");
                WriteLiteral(@"assName('loader')[0];

        // Add an 'onchange' handler for the results drop-down list.
        var selResults = document.getElementById('results');
        selResults.onchange = function () {
            var selectedValue = this.options[this.selectedIndex].value;
            var dataset = oJson[selectedValue].hasOwnProperty('DPA') ? 'DPA' : 'LPI';
            var result = oJson[selectedValue][dataset];

            // Clear the form.
            var elements = document.querySelectorAll(""form input[type='text']"");
            elements.forEach(o => o.value = '');

            // Clear the <textarea> contents.
            textarea.value = '';

            // The following is based on the rules for generating multi-line addresses which are
            // documented in Chapter 9 of the AddressBase Premium Getting Started Guide:
            // https://www.ordnancesurvey.co.uk/documents/product-support/getting-started/addressbase-premium-getting-started-guide.pdf

            // Define an em");
                WriteLiteral(@"pty address array variable.
            var arrAddrLine = [];

            if (dataset == 'DPA') {
                // Define variables for DPA address components (blank if NULL).
                var dpaDepartmentName = result.DEPARTMENT_NAME || '';
                var dpaOrganisationName = result.ORGANISATION_NAME || '';
                var dpaSubBuildingName = result.SUB_BUILDING_NAME || '';
                var dpaBuildingName = result.BUILDING_NAME || '';
                var dpaBuildingNumber = result.BUILDING_NUMBER || '';
                var dpaPOBoxNumber = result.PO_BOX_NUMBER || '';
                var dpaDependentThoroughfareName = result.DEPENDENT_THOROUGHFARE_NAME || '';
                var dpaThoroughfareName = result.THOROUGHFARE_NAME || '';
                var dpaDoubleDependentLocality = result.DOUBLE_DEPENDENT_LOCALITY || '';
                var dpaDependentLocality = result.DEPENDENT_LOCALITY || '';
                var dpaPostTown = result.POST_TOWN || '';
                var d");
                WriteLiteral(@"paPostcode = result.POSTCODE || '';

                // Add a ""PO BOX "" prefix to the PO Box Number integer.
                if (dpaPOBoxNumber !== '') dpaPOBoxNumber = `PO BOX ${dpaPOBoxNumber}`;

                // Define arrays for the premises and thoroughfare components of the address.
                var arrPremises = [dpaBuildingNumber, dpaSubBuildingName, dpaBuildingName].filter(item => item);
                var arrThoroughfareLocality = [dpaDependentThoroughfareName, dpaThoroughfareName, dpaDoubleDependentLocality, dpaDependentLocality].filter(item => item);

                // Define an empty string to store the appropriately combined/structured premises and
                // thoroughfare components.
                var strPremisesThoroughfareLocality = '';

                // Define a regular expression to test for a letter suffix (e.g. '11A') or number
                // range (e.g. '3-5'). Combine the first values from the premises and thoroughfare
                // arrays into ");
                WriteLiteral(@"a string; before removing them from the array.
                var regex = /(^[1-9]+[a-zA-Z]$)|(^[1-9]+-[1-9]+$)/;
                if (regex.test(dpaSubBuildingName) || regex.test(dpaBuildingName) || dpaBuildingNumber !== '') {
                    strPremisesThoroughfareLocality = `${arrPremises[0]} ${arrThoroughfareLocality[0]}`;
                    arrThoroughfareLocality.shift();
                    arrPremises.shift();
                }

                // Push the Department Name, Organisation Name and PO Box Number to the address array.
                arrAddrLine.push(dpaDepartmentName, dpaOrganisationName, dpaPOBoxNumber);

                // Merge the structured premises and thoroughfare components into the address array.
                arrAddrLine = arrAddrLine.concat(arrPremises);
                arrAddrLine = arrAddrLine.concat(strPremisesThoroughfareLocality);
                arrAddrLine = arrAddrLine.concat(arrThoroughfareLocality);

                // Remove any duplicates and ");
                WriteLiteral(@"blanks from the address array.
                arrAddrLine = [...new Set(arrAddrLine)];
                arrAddrLine = arrAddrLine.filter(item => item);

                // Populate the ""Address Line 1-4"" fields using the address array.
                var counter = Math.min(arrAddrLine.length, 4);
                for (var i = 1; i <= counter; i++) {
                    var elemId = `_addr${i}`;
                    document.getElementById(elemId).value = arrAddrLine[i - 1];
                }

                // Populate the remaining fields.
                document.getElementById('_town').value = dpaPostTown;
                document.getElementById('_postcode').value = dpaPostcode;
            }
            else if (dataset == 'LPI') {
                // Define variables for LPI address components (blank if NULL).
                var lpiOrganisation = result.ORGANISATION || '';
                var lpiSAOText = result.SAO_TEXT || '';
                var lpiSAOStartNumber = result.SAO_START_N");
                WriteLiteral(@"UMBER || '';
                var lpiSAOStartSuffix = result.SAO_START_SUFFIX || '';
                var lpiSAOEndNumber = result.SAO_END_NUMBER || '';
                var lpiSAOEndSuffix = result.SAO_END_SUFFIX || '';
                var lpiPAOText = result.PAO_TEXT || '';
                var lpiPAOStartNumber = result.PAO_START_NUMBER || '';
                var lpiPAOStartSuffix = result.PAO_START_SUFFIX || '';
                var lpiPAOEndNumber = result.PAO_END_NUMBER || '';
                var lpiPAOEndSuffix = result.PAO_END_SUFFIX || '';
                var lpiStreetDescription = result.STREET_DESCRIPTION || '';
                var lpiLocality = result.LOCALITY || '';
                var lpiTownName = result.TOWN_NAME || '';
                var lpiAdministrativeArea = result.ADMINISTRATIVE_AREA || '';
                var lpiPostcodeLocator = result.POSTCODE_LOCATOR || '';

                // Create SAO number/range value (e.g. '1' or '1A' or '1-5' or '1A-5C').
                var lpiSAON");
                WriteLiteral(@"umberRange = `${lpiSAOStartNumber}${lpiSAOStartSuffix}-${lpiSAOEndNumber}${lpiSAOEndSuffix}`;
                lpiSAONumberRange = lpiSAONumberRange.replace(/-+$/, """");

                // Create PAO number/range value (e.g. '1' or '1A' or '1-5' or '1A-5C').
                var lpiPAONumberRange = `${lpiPAOStartNumber}${lpiPAOStartSuffix}-${lpiPAOEndNumber}${lpiPAOEndSuffix}`;
                lpiPAONumberRange = lpiPAONumberRange.replace(/-+$/, """");

                // Combine the SAO number/range value and PAO text.
                var lpiSAONumberRangePAOText = [lpiSAONumberRange, lpiPAOText].join(' ').trim();

                // Combine the PAO number/range and street description.
                var lpiPAONumberRangeStreetDescription = [lpiPAONumberRange, lpiStreetDescription].join(' ').trim();

                // {Edge Case} If there is only a SAO number/range value and PAO number/range value; then
                // the SAO number/range should appear on the same line as the combined PAO num");
                WriteLiteral(@"ber/range
                // and street description.
                if (lpiSAONumberRange !== '' && lpiSAOText === '' && lpiPAONumberRange !== '' && lpiPAOText === '') {
                    lpiPAONumberRangeStreetDescription = `${lpiSAONumberRange}, ${lpiPAONumberRangeStreetDescription}`;
                }

                // Push the organisation, SAO text and combined PAO number/range and street description
                // to the address array.
                if (lpiOrganisation !== '') arrAddrLine.push(lpiOrganisation);
                if (lpiSAOText !== '') arrAddrLine.push(lpiSAOText);
                if (lpiSAONumberRangePAOText !== '') arrAddrLine.push(lpiSAONumberRangePAOText);

                // Add the combined PAO number/range and street description to the address array.
                arrAddrLine.push(lpiPAONumberRangeStreetDescription);

                // Remove any duplicates and blanks from the address array.
                arrAddrLine = [...new Set(arrAddrLine)];
    ");
                WriteLiteral(@"            arrAddrLine = arrAddrLine.filter(item => item);

                // Populate the ""Address Line 1-4"" fields using the address array.
                var counter = Math.min(arrAddrLine.length, 4);
                for (var i = 1; i <= counter; i++) {
                    var elemId = `_addr${i}`;
                    document.getElementById(elemId).value = arrAddrLine[i - 1];
                }

                // Populate the remaining fields.
                document.getElementById('_locality').value = lpiLocality;
                document.getElementById('_town').value = lpiTownName;
                document.getElementById('_admin').value = lpiAdministrativeArea;
                document.getElementById('_postcode').value = lpiPostcodeLocator;
            }

            // Populate the <textarea> from the completed form.
            elements.forEach(o => {
                if (o.value !== '') textarea.value += o.value + '\r\n';
            });

            // Reset the table row val");
                WriteLiteral(@"ues.
            var rows = document.querySelectorAll('tr');
            rows.forEach(o => o.childNodes[1].innerText = '');

            // Loop through object keys to populate the matching table row (based on the
            // textContent) with the object value.
            for (var prop in result) {
                for (var a of document.querySelectorAll('table tr')) {
                    if (a.textContent === prop) {
                        a.childNodes[1].innerText = result[prop];
                    }
                }
            }
        }

        /**
         * Get features from the API.
         */
        function getFeatures() {
            var apikey = document.getElementById('apikey').value;
            var query = document.getElementById('query').value;
            var resource = document.querySelector('input[name=""resource""]:checked').value;
            var dataset = document.getElementById('dataset').value;

            var search = resource === 'find' ? 'query' : re");
                WriteLiteral(@"source;

            // Define request parameters.
            var params = {
                key: apikey,
                [search]: query,
                dataset: dataset,
                output_srs: 'EPSG:4326'
            };

            var queryString = Object.keys(params).map(function (key) {
                return key + '=' + params[key];
            }).join('&');

            loader.style.display = 'inline-block';

            // Use fetch() method to request address, postcode, or UPRN.

            alert('https://api.os.uk/search/places/v1/' + resource + '?' + queryString);
            fetch('https://api.os.uk/search/places/v1/' + resource + '?' + queryString)
                .then(response => response.json())
                .then(data => {
                    if (data.error) {
                        loader.style.display = 'none';
                        alert(data.error.message);
                        return false;
                    }                  

           ");
                WriteLiteral(@"         // Clear the results drop-down list.
                    var options = document.querySelectorAll('#results option');
                    options.forEach(o => o.remove());

                    // Configure the
                    document.querySelectorAll(""form input"").forEach(o => o.value = '');
                    document.getElementById('_locality').type = dataset === 'dpa' ? 'hidden' : 'text';
                    document.getElementById('_admin').type = dataset === 'dpa' ? 'hidden' : 'text';

                    textarea.value = '';

                    initialiseTable(fields[dataset.toUpperCase()]);

                    if (data.header.totalresults > 0) {
                        // Update the JSON object with the data results.
                        oJson = data.results;

                        alert(data.results);

                        // Loop through the data results; adding the address string as a new option
                        // to the results drop-down list.
  ");
                WriteLiteral(@"                      data.results.forEach(function (val, i) {
                            var option = document.createElement('option');
                            option.value = i;
                            option.text = val[dataset.toUpperCase()].ADDRESS;
                            selResults.add(option);
                        });

                        // Scroll the results drop-down list back to the top.
                        selResults.scrollTo(0, 0);

                        // Display the request URI.
                        document.getElementById('uri').innerText = decodeURIComponent(data.header.uri);
                    }

                    loader.style.display = 'none';
                });
        }

        /**
         * Helper function to generate a clean (empty) table structure.
         */
        function initialiseTable(arr) {
            alert('here');
            var table = document.getElementsByTagName('table')[0];
            table.innerHTML = '';
");
                WriteLiteral(@"
            for (var i = arr.length - 1; i >= 0; i--) {
                var row = table.insertRow(0);
                var cell1 = row.insertCell(0);
                var cell2 = row.insertCell(1);
                cell1.innerHTML = arr[i];
            }
        }

        /**
         * Copy the contents of <textarea> to the clipboard.
         */
        function copyToClipboard(e) {
            e.preventDefault();

            // Select the text field.
            textarea.select();
            textarea.setSelectionRange(0, 99999); /* For mobile devices */

            // Copy the text inside the text field.
            document.execCommand(""copy"");
        }

    </script>

");
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.BodyTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_BodyTagHelper);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            WriteLiteral("\r\n</html>\r\n");
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
